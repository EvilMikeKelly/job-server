from pygments import highlight
from pygments.formatters import HtmlFormatter
from pygments.lexers import YamlLexer

from .github import get_branch, get_file


def get_actions(config, status_lut):
    """Get actions from a pipeline config for this Workspace"""
    for action, children in config.actions.items():
        needs = sorted(children.needs)

        # get latest status for this action from the lookup table
        status = status_lut.get(action, "-")

        yield {"name": action, "needs": needs, "status": status}

    # ensure there's always a run_all action
    if "run_all" not in config.actions:
        all_actions = list(config.actions.keys())
        yield {"name": "run_all", "needs": all_actions, "status": "-"}


def get_project(org, repo, branch):
    content = get_file(org, repo, branch)

    if content is not None:
        return content

    if get_branch(org, repo, branch) is None:
        raise Exception(f"Missing branch: '{branch}'")

    raise Exception("Could not find project.yaml")


def link_run_scripts(line, link_func):
    """
    Find scripts in a run: line and wrap with links

    Given a line of text try to find script-looking paths and convert them to
    HTML links using the given linking function.
    """
    # split with parentheses to capture delimiter
    parts = line.split(" ")

    for part in parts:
        if part.startswith("-"):
            # ignore CLI switches
            yield part
            continue

        if "output" in part:
            # output in path sounds like an output location
            yield part
            continue

        if "/" not in part:
            # assume all script calls use a subdirectory
            yield part
            continue

        # keep the original token for the label
        label = part

        # strip common prefixes which aren't of use to us when linking to the
        # blob on GitHub
        part = part.removeprefix("/workspace/")
        part = part.removeprefix("./")
        part = part.removeprefix("/")

        url = link_func(part)
        yield f'<a href="{url}">{label}</a>'


def map_run_scripts_to_links(content, link_func):
    """
    Build a mapping of script-looking substrings to HTML link

    We want to link scripts in project.yamls to their files on GitHub, however
    we can't replace the script names in YAML with <a>s as pygments will wrap
    it in its output.  So instead this function builds up a mapping with the
    original target for a run: as the key and the same line with scripts
    converted to links as the value.  That lets us turn a line which looks so:

        run: stata-mp:latest analysis/flow_chart_af_population.do af_population_flowchart

    into a mapping like this:

        {"stata-mp:latest analysis/flow_chart_af_population.do af_population_flowchart": "<a href="â€¦">stata-mp:latest analysis/flow_chart_af_population.do af_population_flowchart</a>"}

    This lets us then mutate the HTML output from pygments.
    """
    # break up the original content into lines
    lines = content.split("\n")

    # gather only lines with a run: stanza
    run_lines = [line.strip() for line in lines if "run:" in line]

    # strip the run prefixes so the resulting line can be used as a key later
    # the HTML generated by pygments puts the `run:` portion in a different
    # <span> so we don't need to bother keeping it when replacing the target
    # portion.
    run_lines = [line.removeprefix("run:").strip() for line in run_lines]

    # build up an iterable of tuples with (original, replacement)
    links_map = (
        (line, " ".join(link_run_scripts(line, link_func))) for line in run_lines
    )

    # finally convert to a dictionary so we can use it as a mapping
    return dict(links_map)


def render_definition(content, link_func):
    """
    Build a HTML version of the given project.yaml content

    In the future it might be eaiser to consume a parsed version of a
    project.yaml but since we're only converting the script-looking substrings
    currently this seems like the quicker path.
    """
    # convert the YAML content to HTML with pygments
    output = highlight(
        content.strip(),
        YamlLexer(),
        HtmlFormatter(cssclass="card-body my-0 rounded-0 highlight"),
    )

    # replace the script lines with their links
    links_map = map_run_scripts_to_links(content, link_func)
    for script, link in links_map.items():
        output = output.replace(script, link)

    return output
