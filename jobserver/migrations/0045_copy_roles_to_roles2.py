# Generated by Django 3.2.5 on 2021-10-18 08:30

from django.db import migrations


def forward(table_name):
    """
    Generate SQL for population roles2 in the given table name

    In converting from SQLite's JSON column to Postgres the 'roles' column
    became a comma-delimited string.  We want to convert this to a
    Postgres-native Array.

    This query casts the comma-delimited string to a
    JSONB array of strings, then pulls the elements from that array as an
    actual array, which we insert into roles2.

    We build this SQL in a function to save having 4 nearly identical copies
    and because we can't use SQL variable interpolation with table names
    [easily].
    """
    return f"""
    UPDATE jobserver_{table_name}
       SET roles2 = subquery.roles
      FROM (
        SELECT id, ARRAY(SELECT jsonb_array_elements_text(roles)) AS roles
        FROM jobserver_{table_name}
      ) AS subquery
     WHERE jobserver_{table_name}.id = subquery.id;
    """


def backward(table_name):
    return f"""
    UPDATE jobserver_{table_name}
       SET roles2 = '{{}}',
           roles = subquery.roles2
      FROM (
        SELECT id, array_to_json(roles2)::jsonb AS roles2
        FROM jobserver_{table_name}
      ) AS subquery
     WHERE jobserver_{table_name}.id = subquery.id;
    """


class Migration(migrations.Migration):
    dependencies = [
        ("jobserver", "0044_add_roles2_fields"),
    ]

    operations = [
        migrations.RunSQL(
            sql=[
                (forward("orgmembership"), None),
                (forward("projectmembership"), None),
                (forward("user"), None),
            ],
            reverse_sql=[
                (backward("orgmembership"), None),
                (backward("projectmembership"), None),
                (backward("user"), None),
            ],
        )
    ]
