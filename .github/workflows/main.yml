---
name: CI

env:
  IMAGE_NAME: job-server
  PUBLIC_IMAGE_NAME: ghcr.io/opensafely-core/job-server
  REGISTRY: ghcr.io
  SSH_AUTH_SOCK: /tmp/agent.sock

on:
  push:

jobs:
  assets:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install node_modules
        run: npm ci --ignore-scripts

      - name: Lint assets
        run: npm run lint

      - name: Run JS tests
        run: npm run test:coverage

      - name: Build assets
        run: just assets-build

      - name: Store assets
        uses: actions/upload-artifact@v3
        with:
          name: node-assets
          path: assets/dist

  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.*.txt
      - uses: extractions/setup-just@v1
      - name: Check formatting, linting and import sorting
        run: just check

  test:
    needs: [assets]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: jobserver
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.*.txt
      - uses: extractions/setup-just@v1

      - name: Retrieve assets
        uses: actions/download-artifact@v3
        with:
          name: node-assets
          path: assets/dist

      - name: Run tests
        env:
          DATABASE_URL: postgres://user:password@localhost/jobserver
          GITHUB_TOKEN: empty
          GITHUB_TOKEN_TESTING: ${{ secrets.OPENSAFELY_GITHUB_TESTING_ORG_PAT }}
          SECRET_KEY: 12345
          SOCIAL_AUTH_GITHUB_KEY: test
          SOCIAL_AUTH_GITHUB_SECRET: test
        run: |
          just check-migrations
          just test --migrations

  lint-dockerfile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183  # v2.1.0
        with:
          dockerfile: docker/Dockerfile

  docker-smoketest:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: jobserver
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Run prod image and see if it can serve a basic test
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          COMPOSE_PROJECT_NAME: job-server
        run: |
          cat >> .env <<EOL
          DATABASE_URL=postgres://user:password@172.17.0.1/jobserver
          DJANGO_VITE_DEV_MODE=False
          GITHUB_TOKEN=
          SECRET_KEY=12345
          SOCIAL_AUTH_GITHUB_KEY=test
          SOCIAL_AUTH_GITHUB_SECRET=test
          EOL
          docker-compose -f docker/docker-compose.yaml up --detach prod
          bash check.sh

  docker-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@aa5d15c144db4585980a44ebfdd2cf337c4f14cb  # v1.4.0

      - name: Build docker image and run tests in it
        env:
          GITHUB_TOKEN_TESTING: ${{ secrets.OPENSAFELY_GITHUB_TESTING_ORG_PAT }}
        run: |
          # build docker and run test
          just docker-test

  deploy:
    needs: [check, test, docker-test, lint-dockerfile]

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    if: github.ref == 'refs/heads/main'

    concurrency: deploy-production

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: extractions/setup-just@aa5d15c144db4585980a44ebfdd2cf337c4f14cb  # v1.4.0

      - name: Build docker image
        run: |
          # docker-test step will build the dev image by default, so build the prod image
          just docker-build prod

      - name: Login to Packages Container registry
        run: |
            docker login $REGISTRY -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

      - name: publish docker image
        run: |
            docker tag $IMAGE_NAME $PUBLIC_IMAGE_NAME:latest
            docker push $PUBLIC_IMAGE_NAME:latest

      - name: Setup SSH Agent
        run: |
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ secrets.DOKKU2_DEPLOY_SSH_KEY }}"

      - name: Deploy
        run: |
            SHA=$(docker inspect --format='{{index .RepoDigests 0}}' $PUBLIC_IMAGE_NAME:latest)
            ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" dokku@dokku2.ebmdatalab.net git:from-image job-server $SHA

      - name: Create Sentry release
        uses: getsentry/action-release@426b54786363ee2ecb27129f04b99cf714a36d38
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_RELEASE_INTEGRATION_TOKEN }}
          SENTRY_ORG: ebm-datalab
          SENTRY_PROJECT: job-server
        with:
          environment: production
