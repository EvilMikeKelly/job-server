---
name: CI

on:
  push:

jobs:
  assets:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Node.js
      - name: Cache node_modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install node_modules
        run: npm ci

      - name: Lint assets
        run: npm run lint

      - name: Build assets
        run: npm run build
        env:
          VITE_REACT_SENTRY: ${{ secrets.VITE_REACT_SENTRY }}

      - name: Store assets
        uses: actions/upload-artifact@v2
        with:
          name: node-assets
          path: assets/dist

  format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install dependencies"
        run: |
          set -xe
          python -m pip install --upgrade pip
          python -m venv venv
          venv/bin/pip install --progress-bar=off --require-hashes --requirement requirements.dev.txt
      - run: ls -lah ${{ github.workspace }}
      - name: Check formatting
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          make format

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install dependencies"
        run: |
          set -xe
          python -m pip install --upgrade pip
          python -m venv venv
          venv/bin/pip install --progress-bar=off --require-hashes --requirement requirements.dev.txt
      - name: Check linting
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          make lint

  sort:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install dependencies"
        run: |
          set -xe
          python -m pip install --upgrade pip
          python -m venv venv
          venv/bin/pip install --progress-bar=off --require-hashes --requirement requirements.dev.txt
      - name: Check import sorting
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          make sort

  upgrade:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install dependencies"
        run: |
          set -xe
          python -m pip install --upgrade pip
          python -m venv venv
          venv/bin/pip install --progress-bar=off --require-hashes --requirement requirements.dev.txt
      - name: Check for syntax upgrades
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          make check-for-upgrades

  test:
    needs: [assets, format, lint, sort, upgrade]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"

      - name: "Install dependencies"
        run: |
          set -xe
          python -m pip install --upgrade pip
          python -m venv venv
          venv/bin/pip install --progress-bar=off --require-hashes --requirement requirements.dev.txt

      - name: Retrieve assets
        uses: actions/download-artifact@v2
        with:
          name: node-assets
          path: assets/dist

      - name: Run tests
        env:
          SECRET_KEY: 12345
          SOCIAL_AUTH_GITHUB_KEY: test
          SOCIAL_AUTH_GITHUB_SECRET: test
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          make test

  lint-dockerfile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.4.0

  deploy:
    needs: [test, lint-dockerfile]
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    concurrency: deploy-production

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Deploy to dokku
        uses: opensafely-core/dokku-deploy-github-action@v1
        with:
          app-name: "job-server"
          dokku-host: ${{ secrets.DOKKU_HOST }}
          ssh-private-key: ${{ secrets.DOKKU2_DEPLOY_SSH_KEY }}
          remote-branch: "main"
